/**
 * Copyright (c) 2000-2013 Liferay, Inc. All rights reserved.
 *
 * The contents of this file are subject to the terms of the Liferay Enterprise
 * Subscription License ("License"). You may not use this file except in
 * compliance with the License. You can obtain a copy of the License by
 * contacting Liferay, Inc. See the License for the specific language governing
 * permissions and limitations under the License, including but not limited to
 * distribution rights of the Software.
 *
 *
 *
 */

package br.com.cnf.curso.inscricao.model.impl;

import br.com.cnf.curso.inscricao.model.PedidoMoedaDigital;
import br.com.cnf.curso.inscricao.model.PedidoMoedaDigitalModel;

import com.liferay.portal.LocaleException;
import com.liferay.portal.kernel.bean.AutoEscapeBeanHandler;
import com.liferay.portal.kernel.json.JSON;
import com.liferay.portal.kernel.util.GetterUtil;
import com.liferay.portal.kernel.util.LocaleUtil;
import com.liferay.portal.kernel.util.LocalizationUtil;
import com.liferay.portal.kernel.util.ProxyUtil;
import com.liferay.portal.kernel.util.StringBundler;
import com.liferay.portal.kernel.util.StringPool;
import com.liferay.portal.kernel.util.Validator;
import com.liferay.portal.model.CacheModel;
import com.liferay.portal.model.impl.BaseModelImpl;
import com.liferay.portal.service.ServiceContext;

import com.liferay.portlet.expando.model.ExpandoBridge;
import com.liferay.portlet.expando.util.ExpandoBridgeFactoryUtil;

import java.io.Serializable;

import java.sql.Types;

import java.util.Date;
import java.util.HashMap;
import java.util.Locale;
import java.util.Map;
import java.util.Set;
import java.util.TreeSet;

/**
 * The base model implementation for the PedidoMoedaDigital service. Represents a row in the &quot;cnf_PedidoMoedaDigital&quot; database table, with each column mapped to a property of this class.
 *
 * <p>
 * This implementation and its corresponding interface {@link br.com.cnf.curso.inscricao.model.PedidoMoedaDigitalModel} exist only as a container for the default property accessors generated by ServiceBuilder. Helper methods and all application logic should be put in {@link PedidoMoedaDigitalImpl}.
 * </p>
 *
 * @author SEA
 * @see PedidoMoedaDigitalImpl
 * @see br.com.cnf.curso.inscricao.model.PedidoMoedaDigital
 * @see br.com.cnf.curso.inscricao.model.PedidoMoedaDigitalModel
 * @generated
 */
public class PedidoMoedaDigitalModelImpl extends BaseModelImpl<PedidoMoedaDigital>
	implements PedidoMoedaDigitalModel {
	/*
	 * NOTE FOR DEVELOPERS:
	 *
	 * Never modify or reference this class directly. All methods that expect a pedido moeda digital model instance should use the {@link br.com.cnf.curso.inscricao.model.PedidoMoedaDigital} interface instead.
	 */
	public static final String TABLE_NAME = "cnf_PedidoMoedaDigital";
	public static final Object[][] TABLE_COLUMNS = {
			{ "pedidoMoedaDigitalId", Types.BIGINT },
			{ "inscricaoId", Types.BIGINT },
			{ "dataPedido", Types.TIMESTAMP },
			{ "xmlEnvio", Types.VARCHAR },
			{ "xmlRetorno", Types.VARCHAR }
		};
	public static final String TABLE_SQL_CREATE = "create table cnf_PedidoMoedaDigital (pedidoMoedaDigitalId LONG not null primary key,inscricaoId LONG,dataPedido DATE null,xmlEnvio STRING null,xmlRetorno STRING null)";
	public static final String TABLE_SQL_DROP = "drop table cnf_PedidoMoedaDigital";
	public static final String ORDER_BY_JPQL = " ORDER BY pedidoMoedaDigital.pedidoMoedaDigitalId ASC";
	public static final String ORDER_BY_SQL = " ORDER BY cnf_PedidoMoedaDigital.pedidoMoedaDigitalId ASC";
	public static final String DATA_SOURCE = "liferayDataSource";
	public static final String SESSION_FACTORY = "liferaySessionFactory";
	public static final String TX_MANAGER = "liferayTransactionManager";
	public static final boolean ENTITY_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.entity.cache.enabled.br.com.cnf.curso.inscricao.model.PedidoMoedaDigital"),
			true);
	public static final boolean FINDER_CACHE_ENABLED = GetterUtil.getBoolean(com.liferay.util.service.ServiceProps.get(
				"value.object.finder.cache.enabled.br.com.cnf.curso.inscricao.model.PedidoMoedaDigital"),
			true);
	public static final boolean COLUMN_BITMASK_ENABLED = false;
	public static final long LOCK_EXPIRATION_TIME = GetterUtil.getLong(com.liferay.util.service.ServiceProps.get(
				"lock.expiration.time.br.com.cnf.curso.inscricao.model.PedidoMoedaDigital"));

	public PedidoMoedaDigitalModelImpl() {
	}

	@Override
	public long getPrimaryKey() {
		return _pedidoMoedaDigitalId;
	}

	@Override
	public void setPrimaryKey(long primaryKey) {
		setPedidoMoedaDigitalId(primaryKey);
	}

	@Override
	public Serializable getPrimaryKeyObj() {
		return _pedidoMoedaDigitalId;
	}

	@Override
	public void setPrimaryKeyObj(Serializable primaryKeyObj) {
		setPrimaryKey(((Long)primaryKeyObj).longValue());
	}

	@Override
	public Class<?> getModelClass() {
		return PedidoMoedaDigital.class;
	}

	@Override
	public String getModelClassName() {
		return PedidoMoedaDigital.class.getName();
	}

	@Override
	public Map<String, Object> getModelAttributes() {
		Map<String, Object> attributes = new HashMap<String, Object>();

		attributes.put("pedidoMoedaDigitalId", getPedidoMoedaDigitalId());
		attributes.put("inscricaoId", getInscricaoId());
		attributes.put("dataPedido", getDataPedido());
		attributes.put("xmlEnvio", getXmlEnvio());
		attributes.put("xmlRetorno", getXmlRetorno());

		return attributes;
	}

	@Override
	public void setModelAttributes(Map<String, Object> attributes) {
		Long pedidoMoedaDigitalId = (Long)attributes.get("pedidoMoedaDigitalId");

		if (pedidoMoedaDigitalId != null) {
			setPedidoMoedaDigitalId(pedidoMoedaDigitalId);
		}

		Long inscricaoId = (Long)attributes.get("inscricaoId");

		if (inscricaoId != null) {
			setInscricaoId(inscricaoId);
		}

		Date dataPedido = (Date)attributes.get("dataPedido");

		if (dataPedido != null) {
			setDataPedido(dataPedido);
		}

		String xmlEnvio = (String)attributes.get("xmlEnvio");

		if (xmlEnvio != null) {
			setXmlEnvio(xmlEnvio);
		}

		String xmlRetorno = (String)attributes.get("xmlRetorno");

		if (xmlRetorno != null) {
			setXmlRetorno(xmlRetorno);
		}
	}

	@Override
	public long getPedidoMoedaDigitalId() {
		return _pedidoMoedaDigitalId;
	}

	@Override
	public void setPedidoMoedaDigitalId(long pedidoMoedaDigitalId) {
		_pedidoMoedaDigitalId = pedidoMoedaDigitalId;
	}

	@Override
	public long getInscricaoId() {
		return _inscricaoId;
	}

	@Override
	public void setInscricaoId(long inscricaoId) {
		_inscricaoId = inscricaoId;
	}

	@Override
	public Date getDataPedido() {
		return _dataPedido;
	}

	@Override
	public void setDataPedido(Date dataPedido) {
		_dataPedido = dataPedido;
	}

	@Override
	public String getXmlEnvio() {
		if (_xmlEnvio == null) {
			return StringPool.BLANK;
		}
		else {
			return _xmlEnvio;
		}
	}

	@Override
	public String getXmlEnvio(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getXmlEnvio(languageId);
	}

	@Override
	public String getXmlEnvio(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getXmlEnvio(languageId, useDefault);
	}

	@Override
	public String getXmlEnvio(String languageId) {
		return LocalizationUtil.getLocalization(getXmlEnvio(), languageId);
	}

	@Override
	public String getXmlEnvio(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getXmlEnvio(), languageId,
			useDefault);
	}

	@Override
	public String getXmlEnvioCurrentLanguageId() {
		return _xmlEnvioCurrentLanguageId;
	}

	@JSON
	@Override
	public String getXmlEnvioCurrentValue() {
		Locale locale = getLocale(_xmlEnvioCurrentLanguageId);

		return getXmlEnvio(locale);
	}

	@Override
	public Map<Locale, String> getXmlEnvioMap() {
		return LocalizationUtil.getLocalizationMap(getXmlEnvio());
	}

	@Override
	public void setXmlEnvio(String xmlEnvio) {
		_xmlEnvio = xmlEnvio;
	}

	@Override
	public void setXmlEnvio(String xmlEnvio, Locale locale) {
		setXmlEnvio(xmlEnvio, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setXmlEnvio(String xmlEnvio, Locale locale, Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(xmlEnvio)) {
			setXmlEnvio(LocalizationUtil.updateLocalization(getXmlEnvio(),
					"XmlEnvio", xmlEnvio, languageId, defaultLanguageId));
		}
		else {
			setXmlEnvio(LocalizationUtil.removeLocalization(getXmlEnvio(),
					"XmlEnvio", languageId));
		}
	}

	@Override
	public void setXmlEnvioCurrentLanguageId(String languageId) {
		_xmlEnvioCurrentLanguageId = languageId;
	}

	@Override
	public void setXmlEnvioMap(Map<Locale, String> xmlEnvioMap) {
		setXmlEnvioMap(xmlEnvioMap, LocaleUtil.getDefault());
	}

	@Override
	public void setXmlEnvioMap(Map<Locale, String> xmlEnvioMap,
		Locale defaultLocale) {
		if (xmlEnvioMap == null) {
			return;
		}

		setXmlEnvio(LocalizationUtil.updateLocalization(xmlEnvioMap,
				getXmlEnvio(), "XmlEnvio",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public String getXmlRetorno() {
		if (_xmlRetorno == null) {
			return StringPool.BLANK;
		}
		else {
			return _xmlRetorno;
		}
	}

	@Override
	public String getXmlRetorno(Locale locale) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getXmlRetorno(languageId);
	}

	@Override
	public String getXmlRetorno(Locale locale, boolean useDefault) {
		String languageId = LocaleUtil.toLanguageId(locale);

		return getXmlRetorno(languageId, useDefault);
	}

	@Override
	public String getXmlRetorno(String languageId) {
		return LocalizationUtil.getLocalization(getXmlRetorno(), languageId);
	}

	@Override
	public String getXmlRetorno(String languageId, boolean useDefault) {
		return LocalizationUtil.getLocalization(getXmlRetorno(), languageId,
			useDefault);
	}

	@Override
	public String getXmlRetornoCurrentLanguageId() {
		return _xmlRetornoCurrentLanguageId;
	}

	@JSON
	@Override
	public String getXmlRetornoCurrentValue() {
		Locale locale = getLocale(_xmlRetornoCurrentLanguageId);

		return getXmlRetorno(locale);
	}

	@Override
	public Map<Locale, String> getXmlRetornoMap() {
		return LocalizationUtil.getLocalizationMap(getXmlRetorno());
	}

	@Override
	public void setXmlRetorno(String xmlRetorno) {
		_xmlRetorno = xmlRetorno;
	}

	@Override
	public void setXmlRetorno(String xmlRetorno, Locale locale) {
		setXmlRetorno(xmlRetorno, locale, LocaleUtil.getDefault());
	}

	@Override
	public void setXmlRetorno(String xmlRetorno, Locale locale,
		Locale defaultLocale) {
		String languageId = LocaleUtil.toLanguageId(locale);
		String defaultLanguageId = LocaleUtil.toLanguageId(defaultLocale);

		if (Validator.isNotNull(xmlRetorno)) {
			setXmlRetorno(LocalizationUtil.updateLocalization(getXmlRetorno(),
					"XmlRetorno", xmlRetorno, languageId, defaultLanguageId));
		}
		else {
			setXmlRetorno(LocalizationUtil.removeLocalization(getXmlRetorno(),
					"XmlRetorno", languageId));
		}
	}

	@Override
	public void setXmlRetornoCurrentLanguageId(String languageId) {
		_xmlRetornoCurrentLanguageId = languageId;
	}

	@Override
	public void setXmlRetornoMap(Map<Locale, String> xmlRetornoMap) {
		setXmlRetornoMap(xmlRetornoMap, LocaleUtil.getDefault());
	}

	@Override
	public void setXmlRetornoMap(Map<Locale, String> xmlRetornoMap,
		Locale defaultLocale) {
		if (xmlRetornoMap == null) {
			return;
		}

		setXmlRetorno(LocalizationUtil.updateLocalization(xmlRetornoMap,
				getXmlRetorno(), "XmlRetorno",
				LocaleUtil.toLanguageId(defaultLocale)));
	}

	@Override
	public ExpandoBridge getExpandoBridge() {
		return ExpandoBridgeFactoryUtil.getExpandoBridge(0,
			PedidoMoedaDigital.class.getName(), getPrimaryKey());
	}

	@Override
	public void setExpandoBridgeAttributes(ServiceContext serviceContext) {
		ExpandoBridge expandoBridge = getExpandoBridge();

		expandoBridge.setAttributes(serviceContext);
	}

	@Override
	public String[] getAvailableLanguageIds() {
		Set<String> availableLanguageIds = new TreeSet<String>();

		Map<Locale, String> xmlEnvioMap = getXmlEnvioMap();

		for (Map.Entry<Locale, String> entry : xmlEnvioMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		Map<Locale, String> xmlRetornoMap = getXmlRetornoMap();

		for (Map.Entry<Locale, String> entry : xmlRetornoMap.entrySet()) {
			Locale locale = entry.getKey();
			String value = entry.getValue();

			if (Validator.isNotNull(value)) {
				availableLanguageIds.add(LocaleUtil.toLanguageId(locale));
			}
		}

		return availableLanguageIds.toArray(new String[availableLanguageIds.size()]);
	}

	@Override
	public String getDefaultLanguageId() {
		String xml = getXmlEnvio();

		if (xml == null) {
			return StringPool.BLANK;
		}

		Locale defaultLocale = LocaleUtil.getDefault();

		return LocalizationUtil.getDefaultLanguageId(xml, defaultLocale);
	}

	@Override
	public void prepareLocalizedFieldsForImport() throws LocaleException {
		prepareLocalizedFieldsForImport(null);
	}

	@Override
	@SuppressWarnings("unused")
	public void prepareLocalizedFieldsForImport(Locale defaultImportLocale)
		throws LocaleException {
		Locale defaultLocale = LocaleUtil.getDefault();

		String modelDefaultLanguageId = getDefaultLanguageId();

		String xmlEnvio = getXmlEnvio(defaultLocale);

		if (Validator.isNull(xmlEnvio)) {
			setXmlEnvio(getXmlEnvio(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setXmlEnvio(getXmlEnvio(defaultLocale), defaultLocale, defaultLocale);
		}

		String xmlRetorno = getXmlRetorno(defaultLocale);

		if (Validator.isNull(xmlRetorno)) {
			setXmlRetorno(getXmlRetorno(modelDefaultLanguageId), defaultLocale);
		}
		else {
			setXmlRetorno(getXmlRetorno(defaultLocale), defaultLocale,
				defaultLocale);
		}
	}

	@Override
	public PedidoMoedaDigital toEscapedModel() {
		if (_escapedModel == null) {
			_escapedModel = (PedidoMoedaDigital)ProxyUtil.newProxyInstance(_classLoader,
					_escapedModelInterfaces, new AutoEscapeBeanHandler(this));
		}

		return _escapedModel;
	}

	@Override
	public Object clone() {
		PedidoMoedaDigitalImpl pedidoMoedaDigitalImpl = new PedidoMoedaDigitalImpl();

		pedidoMoedaDigitalImpl.setPedidoMoedaDigitalId(getPedidoMoedaDigitalId());
		pedidoMoedaDigitalImpl.setInscricaoId(getInscricaoId());
		pedidoMoedaDigitalImpl.setDataPedido(getDataPedido());
		pedidoMoedaDigitalImpl.setXmlEnvio(getXmlEnvio());
		pedidoMoedaDigitalImpl.setXmlRetorno(getXmlRetorno());

		pedidoMoedaDigitalImpl.resetOriginalValues();

		return pedidoMoedaDigitalImpl;
	}

	@Override
	public int compareTo(PedidoMoedaDigital pedidoMoedaDigital) {
		long primaryKey = pedidoMoedaDigital.getPrimaryKey();

		if (getPrimaryKey() < primaryKey) {
			return -1;
		}
		else if (getPrimaryKey() > primaryKey) {
			return 1;
		}
		else {
			return 0;
		}
	}

	@Override
	public boolean equals(Object obj) {
		if (this == obj) {
			return true;
		}

		if (!(obj instanceof PedidoMoedaDigital)) {
			return false;
		}

		PedidoMoedaDigital pedidoMoedaDigital = (PedidoMoedaDigital)obj;

		long primaryKey = pedidoMoedaDigital.getPrimaryKey();

		if (getPrimaryKey() == primaryKey) {
			return true;
		}
		else {
			return false;
		}
	}

	@Override
	public int hashCode() {
		return (int)getPrimaryKey();
	}

	@Override
	public void resetOriginalValues() {
	}

	@Override
	public CacheModel<PedidoMoedaDigital> toCacheModel() {
		PedidoMoedaDigitalCacheModel pedidoMoedaDigitalCacheModel = new PedidoMoedaDigitalCacheModel();

		pedidoMoedaDigitalCacheModel.pedidoMoedaDigitalId = getPedidoMoedaDigitalId();

		pedidoMoedaDigitalCacheModel.inscricaoId = getInscricaoId();

		Date dataPedido = getDataPedido();

		if (dataPedido != null) {
			pedidoMoedaDigitalCacheModel.dataPedido = dataPedido.getTime();
		}
		else {
			pedidoMoedaDigitalCacheModel.dataPedido = Long.MIN_VALUE;
		}

		pedidoMoedaDigitalCacheModel.xmlEnvio = getXmlEnvio();

		String xmlEnvio = pedidoMoedaDigitalCacheModel.xmlEnvio;

		if ((xmlEnvio != null) && (xmlEnvio.length() == 0)) {
			pedidoMoedaDigitalCacheModel.xmlEnvio = null;
		}

		pedidoMoedaDigitalCacheModel.xmlRetorno = getXmlRetorno();

		String xmlRetorno = pedidoMoedaDigitalCacheModel.xmlRetorno;

		if ((xmlRetorno != null) && (xmlRetorno.length() == 0)) {
			pedidoMoedaDigitalCacheModel.xmlRetorno = null;
		}

		return pedidoMoedaDigitalCacheModel;
	}

	@Override
	public String toString() {
		StringBundler sb = new StringBundler(11);

		sb.append("{pedidoMoedaDigitalId=");
		sb.append(getPedidoMoedaDigitalId());
		sb.append(", inscricaoId=");
		sb.append(getInscricaoId());
		sb.append(", dataPedido=");
		sb.append(getDataPedido());
		sb.append(", xmlEnvio=");
		sb.append(getXmlEnvio());
		sb.append(", xmlRetorno=");
		sb.append(getXmlRetorno());
		sb.append("}");

		return sb.toString();
	}

	@Override
	public String toXmlString() {
		StringBundler sb = new StringBundler(19);

		sb.append("<model><model-name>");
		sb.append("br.com.cnf.curso.inscricao.model.PedidoMoedaDigital");
		sb.append("</model-name>");

		sb.append(
			"<column><column-name>pedidoMoedaDigitalId</column-name><column-value><![CDATA[");
		sb.append(getPedidoMoedaDigitalId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>inscricaoId</column-name><column-value><![CDATA[");
		sb.append(getInscricaoId());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>dataPedido</column-name><column-value><![CDATA[");
		sb.append(getDataPedido());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xmlEnvio</column-name><column-value><![CDATA[");
		sb.append(getXmlEnvio());
		sb.append("]]></column-value></column>");
		sb.append(
			"<column><column-name>xmlRetorno</column-name><column-value><![CDATA[");
		sb.append(getXmlRetorno());
		sb.append("]]></column-value></column>");

		sb.append("</model>");

		return sb.toString();
	}

	private static ClassLoader _classLoader = PedidoMoedaDigital.class.getClassLoader();
	private static Class<?>[] _escapedModelInterfaces = new Class[] {
			PedidoMoedaDigital.class
		};
	private long _pedidoMoedaDigitalId;
	private long _inscricaoId;
	private Date _dataPedido;
	private String _xmlEnvio;
	private String _xmlEnvioCurrentLanguageId;
	private String _xmlRetorno;
	private String _xmlRetornoCurrentLanguageId;
	private PedidoMoedaDigital _escapedModel;
}